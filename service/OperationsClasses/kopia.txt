using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;




namespace WcfService1
{
    public class MandelbrotGenerator 
    {
        private const int _iXmax = 1000;
        private const int _iYmax = 1000;
        private const double _cxMin = -2.5;
        private const double _cxMax = 1.5;
        private const double _cyMin = -2.0;
        private const double _cyMax = 2.0;
        private const int _maxColorComponentValue = 255;
        //private byte[,,] color = new byte[1001, 1001, 4];
        private const int _iterationMax = 200;
        private const double _escapeRadius = 2;
        private double _pixelWidth = (_cxMax - _cxMin) / _iXmax;
        private double _pixelHeight = (_cyMax - _cyMin) / _iYmax;
        private double _eR2 = _escapeRadius * _escapeRadius;

        private string _docPath = "D:/studia/przetwarzanie rozproszone/projekt/wynik/";

        public void Generate_set() {

            Random rnd = new Random();
            int iX, iY;
            double Cx, Cy;
            double Zx, Zy;
            double Zx2, Zy2;

            byte[,,] color = new byte[1000, 1000, 3];

            var allLength = color.Length;
            var total = 1;
            for (int i = 0; i < color.Rank; i++)
            {
                total *= color.GetLength(i);
            }

            for (int i = 0; i < _iXmax; i++)
                for (int j = 0; j < _iYmax; j++)
                {
                    color[i, j, 0] = 0;
                    color[i, j, 1] = 0;
                    color[i, j, 2] = 0;
                }
            
            byte R = Convert.ToByte(rnd.Next(0, 255));
            byte G = Convert.ToByte(rnd.Next(0, 255));
            byte B = Convert.ToByte(rnd.Next(0, 255));

            ParallelOptions options = new ParallelOptions();
            options.MaxDegreeOfParallelism = 4;
            iY = 0;

            var erwriter = new StreamWriter(Path.Combine(_docPath, "error.txt"));

            erwriter.WriteLine("{0} equals {1}", allLength, total);


            
            Parallel.For(0, _iYmax, options , () => { Cx = 0; Cy = 0; Zx = 0; Zy = 0; Zx2 = 0; Zy2 = 0; iX = 0; }, (iY) =>
            {

                double Cx, Cy;
                double Zx, Zy;
                double Zx2, Zy2;
                int Iteration;
                Cy = _cyMin + iY * _pixelHeight;
                if (Math.Abs(Cy) < _pixelHeight / 2)
                    Cy = 0.0;
                for (iX = 0; iX < _iXmax; iX++)
                {
                    int xa = iX;
                    Cx = _cxMin + xa * _pixelWidth;
                    Zx = 0.0;
                    Zy = 0.0;
                    Zx2 = Zx * Zx;
                    Zy2 = Zy * Zy;
                    for (Iteration = 0; Iteration < _iterationMax && ((Zx2 + Zy2) < _eR2); Iteration++)
                    {
                        Zy = 2 * Zx * Zy + Cy;
                        Zx = Zx2 - Zy2 + Cx;
                        Zx2 = Zx * Zx;
                        Zy2 = Zy * Zy;
                    };
                    if (Iteration == _iterationMax)
                    {
                        color[xa, iY, 0] = 0;
                        color[xa, iY, 1] = 0;
                        color[xa, iY, 2] = 0;
                    }
                    else
                    {
                        try
                        {
                            color[xa, iY, 0] = 100;
                            color[xa, iY, 1] = 100;
                            color[xa, iY, 2] = 100;
                            
                        }
                        catch (Exception e) {
                           erwriter.WriteLine("b1 {0} ", xa.ToString());
                           erwriter.WriteLine("b2 {0} \n", iY.ToString());
                        }
                        
                    };
                }
            });
            erwriter.Close();
           

            string filename = "new1.ppm";

            var writer = new StreamWriter(Path.Combine(_docPath, filename));
            writer.WriteLine("P6");
            writer.WriteLine($"{_iXmax}\n  {_iYmax}");
            writer.WriteLine($"{_maxColorComponentValue}");
            writer.Close();

            using (BinaryWriter writerB = new BinaryWriter(new FileStream(Path.Combine(_docPath, filename), FileMode.Append)))
            {
                for (int i = 0; i < _iXmax; i++)
                    for (int j = 0; j < _iYmax; j++) 
                    {
                        writerB.Write(color[j,i,0]);
                        writerB.Write(color[j,i,1]);
                        writerB.Write(color[j,i,2]);
                    }

            }
            
        }
    }
}